// /*
//  * PX to EM Conversion
//  */
@function em($pixels, $context: $em-base) {
  @return ($pixels / $context) * 1em;
}



// /*
//  * Range Functions
//  * originally from: https://github.com/zurb/foundation/blob/master/scss/foundation/_functions.scss
//  */

@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}



// /*
//  * Get 1st List Member (Low)
//  */

@function low($l) {
  @return nth($l, 1);
}



// /*
//  * Get Last-NTH List Member (High)
//  */

@function high($l) {
  @return nth($l, length($l));
}



/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.06 .08 .09 .12 .15, $depth));

  @return 0 $primary-offset $blur $color;
}



/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.12 .12 .12 .11 .11, $depth));

  @return 0 $primary-offset $blur $color;
}



/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth) {
  @if $depth == 1 {
    // &:after{
    //   content: '';
    //   position: absolute;
    //   z-index: -1;
    //   width: 100%;
    //   height: 100%;
    //   // opacity: 0;
    //   border-radius: 5px;
    //   box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    //   transition: opacity 0.3s ease-in-out;
    // }
    box-shadow: 0 0px 1px rgba(0,0,0,0.3);
  } @else if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}



// /*
//  * Get 1st List Member (Low)
//  */
//
// Responsive Breakpoints
$small-only   : "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;
$medium-up    : "#{$screen} and (min-width:#{lower-bound($medium-range)})" !default;
$medium-only  : "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})" !default;
$large-up     : "#{$screen} and (min-width:#{lower-bound($large-range)})" !default;
$large-only   : "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})" !default;
$xlarge-up    : "#{$screen} and (min-width:#{lower-bound($xlarge-range)})" !default;
$xlarge-only  : "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})" !default;
$xxlarge-up   : "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})" !default;
$xxlarge-only : "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})" !default;

// Respond-To Mixin
@mixin respond-to($breakpoint) {
  @if $breakpoint == "xs" {
    @media #{$small-up} {
      @content;
    }
  }

  @else if $breakpoint == "sm" {
    @media #{$medium-up} {
      @content;
    }
  }

  @else if $breakpoint == "md" {
    @media #{$large-up} {
      @content;
    }
  }

  @else if $breakpoint == "lg" {
    @media #{$xlarge-up} {
      @content;
    }
  }

  @else if $breakpoint == "xl" {
    @media #{$xxlarge-up} {
      @content;
    }
  }

  @else if $breakpoint == "xs-only" {
    @media #{$small-only} {
      @content;
    }
  }

  @else if $breakpoint == "sm-only" {
    @media #{$medium-only} {
      @content;
    }
  }

  @else if $breakpoint == "md-only" {
    @media #{$large-only} {
      @content;
    }
  }

  @else if $breakpoint == "lg-only" {
    @media #{$xlarge-only} {
      @content;
    }
  }

  @else if $breakpoint == "xl-only" {
    @media #{$xxlarge-only} {
      @content;
    }
  }
}
